Template Method Pattern//////The GoF book says: "The Template Method will define the skeletonof an algorithm in an operation, deffering some steps to subclasses.Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure." //////Note that if you want to rewrite everything from scratch every time- if every step has to be customized by writing it from scratch - then you have no need of a template. Only if you have steps that areshared by various implementations of an algorithm do you need to work with a template.////// public abstract class RobotTemplate{  public final void go(){    start();    getParts();    assemble();    test();    stop();  }    public void start(){    ...  }  public void getParts(){    ... something  }  public void assemble(){    ... something  }  public void test(){    ... something  }  public void stop(){    ...   }}public class AutomativeRobot extends RobotTemplate{  public String name;    public AutomativeRobot(String n){    name = n;  }    public void getParts(){    ... carburator  }  public void assemble(){    ... carburator  }  public void test(){    ... carburator  }    public String getName(){    return name;  }}public class CookieRobot extends RobotTemplate{  public String name;    public CookieRobot(String n){    name = n;  }    public void getParts(){    ... cookie  }  public void assemble(){    ... cookie  }  public void test(){    ... cookie  }    public String getName(){    return name;  }}